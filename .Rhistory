dados_vec2 = tibble(
tbill = dados$tbill,
tbill_3year = dados$tbill_3year,
coef_lp = cointegracao) %>%
dplyr::mutate(across(c(tbill, tbill_3year), diff))
tibble(
tbill = dados$tbill,
tbill_3year = dados$tbill_3year,
coef_lp = cointegracao)
dados_vec2 = tibble(
tbill = dados$tbill,
tbill_3year = dados$tbill_3year,
coef_lp = cointegracao) %>%
dplyr::mutate(across(-coef_lp, diff))
cointegracao = ajuste$residuals
cointegracao
cointegracao = cointegracao %>% lag()
cointegracao
dados_vec2 = tibble(
tbill = dados$tbill,
tbill_3year = dados$tbill_3year,
coef_lp = cointegracao) %>%
dplyr::mutate(across(-coef_lp, ~diff(.)))
dados_vec2 = tibble(
tbill = dados$tbill,
tbill_3year = dados$tbill_3year,
coef_lp = cointegracao)
dados_vec2
View(dados_vec2)
rlang::last_trace()
dados_vec2 = tibble(
tbill = dados$tbill %>% diff(),
tbill_3year = dados$tbill_3year %>% diff(),
coef_lp = cointegracao[-1])
dados_vec2
vars::VARselect(dados_vec2)
vars::VARselect(dados_vec2, type = 'both')
vars::VAR(dados_vec2, p = 2, type = 'both')
vars::VAR(dados_vec2, p = 8, type = 'both')
vars::VAR(dados_vec2, p = 1, type = 'both')
vars::VARselect(dados_vec2, type = 'none')
vars::VAR(dados_vec2, p = 1, type = 'none')
dados_vec2 = tibble(
tbill = dados$tbill,
tbill_3year = dados$tbill_3year,
coef_lp = cointegracao)
dados_vec2
vars::VARselect(dados_vec2, type = 'none')
dados_vec2 = tibble(
tbill = dados$tbill,
tbill_3year = dados$tbill_3year,
coef_lp = cointegracao) %>%
na.omit()
vars::VARselect(dados_vec2, type = 'none')
vars::VAR(dados_vec2, p = 8, type = 'none')
dados_vec2 = tibble(
tbill = dados$tbill,
tbill_3year = dados$tbill_3year)
vars::VARselect(dados_vec2, type = 'none')
vars::VAR(dados_vec2, p = 8, type = 'none')
dados_vec2 = tibble(
tbill = dados$tbill,
tbill_3year = dados$tbill_3year,
coef_lp = cointegracao) %>%
na.omit()
vars::VARselect(dados_vec2, type = 'none')
summary(ajuste)
cointegracao = ajuste$residuals
teste_integracao(nome = 'erros', type = 'none', lags = 0, serie = cointegracao)
urca::ur.kpss(cointegracao) %>% summary()
dados_vec2 = tibble(
tbill = dados$tbill %>% diff(),
tbill_3year = dados$tbill_3year %>% diff(),
coef_lp = cointegracao[-1])
vars::VARselect(dados_vec2, type = 'none')
vars::VAR(dados_vec2, p = 8, type = 'none')
dados_vec2 = tibble(
tbill = dados$tbill %>% diff(),
tbill_3year = dados$tbill_3year %>% diff(),
coef_lp = cointegracao[-1])
vars::VARselect(dados_vec2, type = 'none')
vars::VAR(dados_vec2, p = 8, type = 'none')
vars::VARselect(dados_vec2, type = 'trend')
johansen <- urca::ca.jo(dados, type = 'trace', ecdet = 'trend', K = 8)
dados
johansen <- urca::ca.jo(dados[,c(3,4)], type = 'trace', ecdet = 'trend', K = 8)
summary(johansen)
summary(johansen)
VARselect(dados[,c(3,4)], lag.max = 10, type = "const")
vec <- cajorls(johansen, r = 1)  # r = número de vetores cointegrantes, baseado no teste de Johansen
summary(vec$rlm)
johansen <- urca::ca.jo(dados[,c(3,4)], type = 'trace', ecdet = 'trend', K = 7)
summary(johansen)
johansen <- urca::ca.jo(dados[,c(3,4)], type = 'trace', ecdet = 'none', K = 7)
summary(johansen)
johansen <- urca::ca.jo(dados[,c(3,4)], type = 'eigen', ecdet = 'none', K = 7)
summary(johansen)
library(vars)
VARselect(dados[,c(3,4)], lag.max = 10, type = "const")
vec <- cajorls(johansen, r = 1)  # r = número de vetores cointegrantes, baseado no teste de Johansen
summary(vec$rlm)
johansen <- urca::ca.jo(dados[,c(3,4)], type = 'eigen', ecdet = 'none', K = 1)
johansen <- urca::ca.jo(dados[,c(3,4)], type = 'eigen', ecdet = 'none', K = 2)
summary(johansen)
johansen <- urca::ca.jo(dados[,c(3,4)], type = 'eigen', ecdet = 'none', K = 7)
summary(johansen)
johansen <- urca::ca.jo(dados[,c(3,4)], type = 'eigen', ecdet = 'const', K = 7)
summary(johansen)
johansen <- urca::ca.jo(dados[,c(3,4)], type = 'trace', ecdet = 'const', K = 7)
summary(johansen)
summary(johansen)
vec_var <- vec2var(johansen, r = 1)
irf_vec <- irf(vec_var,
runs = 1000,
impulse = "Petanol",     # variável que sofre o choque
# response = "y",    # variável que responde
n.ahead = 20,      # horizonte de resposta
boot = TRUE,       # usar bootstrap para intervalo de confiança
ci = 0.95,
)         # intervalo de 95%
vec_var <- vec2var(johansen, r = 1)
irf_vec <- irf(vec_var,
runs = 1000,
#impulse = "Petanol",     # variável que sofre o choque
# response = "y",    # variável que responde
n.ahead = 20,      # horizonte de resposta
boot = TRUE,       # usar bootstrap para intervalo de confiança
ci = 0.95,
)         # intervalo de 95%
plot(irf_vec)
dados <- readxl::read_excel('data/data_vec_alunos.xls')
dados_log <- dados %>%
dplyr::mutate(dplyr::across(-Ano, log))
dados_log %>%
dplyr::select(-Ano) %>%
ts(start = 1994) %>%
autoplot(facets= T)
teste_integracao <- function( nome, serie, type, lags){
# serie <- dados_log$Pgasolina
# type = "trend"
# lags = 2
adf_test <- urca::ur.df(serie, type = type, selectlags = "BIC", lags = lags)
pp1 <- adf_test@cval[1] %>% abs; pp1
valor_teste <- adf_test@teststat[1] %>% abs; valor_teste
i = 0
while (valor_teste < pp1) {
i = i + 1
serie <- serie %>% diff
adf_test <- urca::ur.df(serie, type = type, selectlags = "BIC", lags = lags)
pp1 <- adf_test@cval[1] %>% abs
valor_teste <- adf_test@teststat[1] %>% abs; valor_teste
}
res <- tibble::tibble(serie = nome, ordem_integracao = i)
return(res)
}
teste1 = teste_integracao(names(dados_log)[2], dados_log$PIB_cap, "drift", lags = 0) %>%
rbind(teste_integracao(names(dados_log)[3], dados_log$Pgasolina, "drift", lags = 1)) %>%
rbind(teste_integracao(names(dados_log)[3], dados_log$Pgasolina, "drift", lags = 1)) %>%
rbind(teste_integracao(names(dados_log)[4], dados_log$Petanol, "drift", lags = 2)) %>%
rbind(teste_integracao(names(dados_log)[5], dados_log$Cgasolina, "drift", lags = 0)); teste1
summary(ajuste)
urca::ur.kpss(cointegracao) %>% summary()
#| output: false
#| echo: false
#| warning: false
dados_diff = dados_log %>%
dplyr::select(-Ano) %>%
ts(start = 1994) %>%
diff(., differences = 2)
#dados_diff[,4] = c(0, dados_diff[,4] %>% diff())
dados_diff =  dados_diff[-1,]
t = c(1:26)
t2 = t^2
ajuste <- lm(dados_log$Cgasolina ~ t + t2 + dados_log$PIB_cap + dados_log$Pgasolina + dados_log$Petanol)
modelsummary(ajuste,
stars = TRUE,
statistic = "({std.error})",
gof_omit = "IC|Log|Adj|AIC|BIC",
output = "markdown")
#| echo: false
#| warning: false
library(dplyr)
library(vars)
library(ggplot2)
library(PerformanceAnalytics)
library(purrr)
library(tidyr)
library(seasonal)
library(svars)
library(broom)
library(modelsummary)
install.packages('modelsummary')
#| output: false
#| echo: false
#| warning: false
dados_diff = dados_log %>%
dplyr::select(-Ano) %>%
ts(start = 1994) %>%
diff(., differences = 2)
#dados_diff[,4] = c(0, dados_diff[,4] %>% diff())
dados_diff =  dados_diff[-1,]
t = c(1:26)
t2 = t^2
ajuste <- lm(dados_log$Cgasolina ~ t + t2 + dados_log$PIB_cap + dados_log$Pgasolina + dados_log$Petanol)
modelsummary(ajuste,
stars = TRUE,
statistic = "({std.error})",
gof_omit = "IC|Log|Adj|AIC|BIC",
output = "markdown")
#| echo: false
#| warning: false
library(dplyr)
library(vars)
library(ggplot2)
library(PerformanceAnalytics)
library(purrr)
library(tidyr)
library(seasonal)
library(svars)
library(broom)
library(modelsummary)
library(kableExtra)
options(scipen = 99999)
#| output: false
#| echo: false
#| warning: false
dados_diff = dados_log %>%
dplyr::select(-Ano) %>%
ts(start = 1994) %>%
diff(., differences = 2)
#dados_diff[,4] = c(0, dados_diff[,4] %>% diff())
dados_diff =  dados_diff[-1,]
t = c(1:26)
t2 = t^2
ajuste <- lm(dados_log$Cgasolina ~ t + t2 + dados_log$PIB_cap + dados_log$Pgasolina + dados_log$Petanol)
modelsummary(ajuste,
stars = TRUE,
statistic = "({std.error})",
gof_omit = "IC|Log|Adj|AIC|BIC",
output = "markdown")
cointegracao = ajuste$residuals
teste_integracao(nome = 'erros', type = 'none', lags = 0, serie = cointegracao)
urca::ur.kpss(cointegracao) %>% summary()
cointegracao = cointegracao %>% lag()
COI
dados_log %>%
dplyr::select(-Ano) %>%
ts(start = 1994) %>%
forecast::autoplot(facets= T)
dados_diff = dados_log %>%
dplyr::select(-Ano) %>%
ts(start = 1994) %>%
diff(., differences = 1)
t = c(1:length(dados_diff))
t2 = t^2
ajuste <- lm(dados_diff[,4] ~ t + t2 + dados_diff[,3] + dados_diff[,2] + dados_diff[,1] + cointegracao[1:length(dados_diff)])
t
dados_diff = dados_log %>%
dplyr::select(-Ano) %>%
ts(start = 1994) %>%
diff(., differences = 1)
t = c(1:length(dados_diff))
t
dados_diff
t = c(1:nrow(dados_diff))
t
#| echo: false
#| warning: false
t = c(1:nrow(dados_log))
t2 = t^2
ajuste <- lm(dados_log$Cgasolina ~ t + t2 + dados_log$PIB_cap + dados_log$Pgasolina + dados_log$Petanol)
modelsummary(ajuste,
stars = TRUE,
statistic = "({std.error})",
gof_omit = "IC|Log|Adj|AIC|BIC",
output = "markdown")
cointegracao = ajuste$residuals
a =teste_integracao(nome = 'erros', type = 'none', lags = 0, serie = cointegracao)
b = urca::ur.kpss(cointegracao) %>% summary()
cointegracao = cointegracao %>% lag()
modelsummary(ajuste,
stars = TRUE,
statistic = "({std.error})",
gof_omit = "IC|Log|Adj|AIC|BIC",
output = "latex")
ajuste <- lm(dados_log$Cgasolina ~ t + t2 + dados_log$PIB_cap + dados_log$Pgasolina + dados_log$Petanol)
summary(ajuste)
#| echo: false
#| warning: false
library(dplyr)
library(vars)
library(ggplot2)
library(PerformanceAnalytics)
library(purrr)
library(tidyr)
library(seasonal)
library(svars)
library(broom)
library(modelsummary)
library(kableExtra)
options(scipen = 99999)
#| echo: false
#| warning: false
# Importando dados
dados <- readxl::read_excel('data/data_vec_alunos.xls')
# A primeira tarefa é colocar as variaveis em log
dados_log <- dados %>%
dplyr::mutate(dplyr::across(-Ano, log))
dados_log %>%
dplyr::select(-Ano) %>%
ts(start = 1994) %>%
forecast::autoplot(facets= T)
# Segunda tarefa: testar o grau de integração
teste_integracao <- function( nome, serie, type, lags){
# serie <- dados_log$Pgasolina
# type = "trend"
# lags = 2
adf_test <- urca::ur.df(serie, type = type, selectlags = "BIC", lags = lags)
pp1 <- adf_test@cval[1] %>% abs; pp1
valor_teste <- adf_test@teststat[1] %>% abs; valor_teste
i = 0
while (valor_teste < pp1) {
i = i + 1
serie <- serie %>% diff
adf_test <- urca::ur.df(serie, type = type, selectlags = "BIC", lags = lags)
pp1 <- adf_test@cval[1] %>% abs
valor_teste <- adf_test@teststat[1] %>% abs; valor_teste
}
res <- tibble::tibble(serie = nome, ordem_integracao = i)
return(res)
}
teste1 = teste_integracao(names(dados_log)[2], dados_log$PIB_cap, "drift", lags = 0) %>%
rbind(teste_integracao(names(dados_log)[3], dados_log$Pgasolina, "drift", lags = 1)) %>%
rbind(teste_integracao(names(dados_log)[3], dados_log$Pgasolina, "drift", lags = 1)) %>%
rbind(teste_integracao(names(dados_log)[4], dados_log$Petanol, "drift", lags = 2)) %>%
rbind(teste_integracao(names(dados_log)[5], dados_log$Cgasolina, "drift", lags = 0));# teste1
lags = 2
teste2 = teste_integracao(names(dados_log)[2], dados_log$PIB_cap, "drift", lags) %>%
rbind(teste_integracao(names(dados_log)[3], dados_log$Pgasolina, "drift", lags)) %>%
rbind(teste_integracao(names(dados_log)[3], dados_log$Pgasolina, "drift", lags)) %>%
rbind(teste_integracao(names(dados_log)[4], dados_log$Petanol, "drift", lags)) %>%
rbind(teste_integracao(names(dados_log)[5], dados_log$Cgasolina, "trend", lags)); #teste2
summary(ajuste)
install.packages('jtools')
library(jtools)
jtools::summ(ajuste)
a = teste_integracao(nome = 'erros', type = 'none', lags = 0, serie = cointegracao)
t = c(1:nrow(dados_log))
t2 = t^2
ajuste <- lm(dados_log$Cgasolina ~ t + t2 + dados_log$PIB_cap + dados_log$Pgasolina + dados_log$Petanol)
jtools::summ(ajuste)
cointegracao = ajuste$residuals
a = teste_integracao(nome = 'erros', type = 'none', lags = 0, serie = cointegracao)
b = urca::ur.kpss(cointegracao) %>% jtools::summ()
b = urca::ur.kpss(cointegracao) %>% summary()
b
t = c(1:nrow(dados_log))
t2 = t^2
ajuste <- lm(dados_log$Cgasolina ~ t + t2 + dados_log$PIB_cap + dados_log$Pgasolina + dados_log$Petanol)
jtools::summ(ajuste)
cointegracao = ajuste$residuals
a = teste_integracao(nome = 'erros', type = 'none', lags = 0, serie = cointegracao)
b = urca::ur.kpss(cointegracao) %>% summary()
a
b = urca::ur.kpss(cointegracao) %>% summary()
b
dados_diff
#| echo: false
#| warning: false
cointegracao = cointegracao[1:nrow(dados_diff)]
dados_diff = dados_log %>%
dplyr::select(-Ano) %>%
ts(start = 1994) %>%
diff(., differences = 1)
t = c(1:nrow(dados_diff))
t2 = t^2
ajuste <- lm(Cgasolina ~ t + t2 + Petanol     + Pgasolina      + PIB_cap   + cointegracao, dados_diff)
jtools::summ(ajuste)
dados_log[,-1]
johansen <- urca::ca.jo(dados_log, type = 'trace', ecdet = 'trend', K = 3)
summary(johansen)
dados_log
dados_log[,-1]
johansen <- urca::ca.jo(dados_log[,-1], type = 'trace', ecdet = 'trend', K = 3)
jtools::summ(johansen)
summary(johansen)
johansen <- urca::ca.jo(dados_log[,-1], type = 'trace', ecdet = 'trend', K = 3)
summary(johansen)
library(vars)
VARselect(dados_log[,-1], lag.max = 10, type = "const")
vec <- cajorls(johansen, r = 3)  # r = número de vetores cointegrantes, baseado no teste de Johansen
summary(vec$rlm)
johansen <- urca::ca.jo(dados_log[,-1], type = 'trace', ecdet = 'trend', K = 3)
summary(johansen)
jtools::summ(vec$rlm)
vec <- cajorls(johansen, r = 3)  # r = número de vetores cointegrantes, baseado no teste de Johansen
jtools::summ(vec$rlm)
summary(vec$rlm)
res
res <- summary(vec$rlm)
res$`Response Cgasolina.d`
res$`Response Cgasolina.d` %>% jtools::summ()
res0 <- summary(johansen)
res0
res0$
library(vars)
res0@cval
res0@teststat
dados <- readxl::read_excel('data/quarterly.xls') %>%
janitor::clean_names() %>%
dplyr::mutate(date = lubridate::yq(date),
dplyr::across(c(ffr, tbill, tbill_3year, tbill_10year ), as.numeric)) %>%
na.omit()
dados
dados %>%
# PASSO CHAVE: Transformar os dados para o formato longo
pivot_longer(
cols = c(tbill, tbill_3year), # Selecione as colunas que você quer plotar
names_to = "series",          # Nome da nova coluna para os nomes das séries (ex: "tbill", "tbill_3year")
values_to = "value"           # Nome da nova coluna para os valores numéricos
) %>%
ggplot(aes(x = date, y = value, linetype = series)) + # Mapeie 'series' para a cor para criar a legenda
geom_line() + # Agora, uma única geom_line é suficiente, pois a cor já diferencia
labs(
title = "Taxas de Juros ao Longo do Tempo",
x = "Data",
y = "Taxa (%)",
color = "Série" # Título da legenda
) +
theme_minimal()
teste1 = teste_integracao('tbill3m', dados$tbill, "drift", lags = 10) %>%
rbind(teste_integracao('tbill3y', dados$tbill_3year, "drift", lags = 10)); teste1
teste_integracao(nome = 'erros', type = 'none', lags = 0, serie = cointegracao)
dados_diff = dados %>%
dplyr::select(tbill, tbill_3year) %>%
ts(start = 1960, frequency = 4) %>%
diff(., differences = 1)
t = c(1:length(dados_diff))
t2 = t^2
ajuste <-   lm( dados$tbill ~ dados$tbill_3year)
summary(ajuste)
cointegracao = ajuste$residuals
var <- vars::VAR(dados_vec2, p = 8, type = 'none')
var
var$varresult$tbill
var$call
var$varresult$tbill
var
res <- summary(var)
var <- vars::VAR(dados_vec2, p = 8, type = 'none')
res <- summary(var)
summary(var)
var
vars::VAR(dados_vec2, p = 8, type = 'none') %>%
summary(var)
vars::VAR(dados_vec2, p = 8, type = 'none') %>%
summary(var)
vars::VAR(dados_vec2, p = 8, type = 'none')
var <- vars::VAR(dados_vec2, p = 8, type = 'none')
summary(var)
summary(var)
var <- vars::VAR(dados_vec2, p = 8, type = 'none')
summary(var)
var <- vars::VAR(dados_vec2, p = 8, type = 'none')
summary(var)
summary(var$varresult)
summary(var)
var <- vars::VAR(dados_vec2, p = 8, type = 'none')
summary(var)
var <- vars::VAR(dados_vec2, p = 7, type = 'none')
summary(var)
var <- vars::VAR(dados_vec2, p = 7, type = 'const')
summary(var)
dados_vec2
var <- vars::VAR(dados_vec2, p = 8, type = 'const')
summary(var)
var <- vars::VAR(dados_vec2, p = 54, type = 'const')
summary(var)
var <- vars::VAR(dados_vec2, p = 4, type = 'const')
summary(var)
var <- vars::VAR(dados_vec2, p = 8, type = 'const')
summary(var)
vars::VARselect(dados_vec2, type = 'none')
var <- vars::VAR(dados_vec2, p = 8, type = 'const')
summary(var)
var$varresult$tbill
#| echo: false
#| warning: false
johansen <- urca::ca.jo(dados[,c(3,4)], type = 'trace', ecdet = 'const', K = 7)
summary(johansen)
library(vars)
VARselect(dados[,c(3,4)], lag.max = 10, type = "const")
vec <- cajorls(johansen, r = 1)  # r = número de vetores cointegrantes, baseado no teste de Johansen
summary(vec$rlm)
vec_var <- vec2var(johansen, r = 1)
irf_vec <- irf(vec_var,
runs = 1000,
#impulse = "Petanol",     # variável que sofre o choque
# response = "y",    # variável que responde
n.ahead = 20,      # horizonte de resposta
boot = TRUE,       # usar bootstrap para intervalo de confiança
ci = 0.95,
)         # intervalo de 95%
plot(irf_vec)
#| echo: false
#| warning: false
johansen <- urca::ca.jo(dados[,c(3,4)], type = 'trace', ecdet = 'const', K = 7)
summary(johansen)
library(vars)
VARselect(dados[,c(3,4)], lag.max = 10, type = "const")
vec <- cajorls(johansen, r = 1)  # r = número de vetores cointegrantes, baseado no teste de Johansen
summary(vec$rlm)
